-- Consts
local STICK_SELECT = {'Movement', 'Camera', 'Gyro'};
local MODID_SELECT = {'SHIFT', 'CTRL', 'ALT'};
local MODID_EXTEND = {'SHIFT', 'CTRL', 'ALT', 'CTRL-SHIFT', 'ALT-SHIFT', 'ALT-CTRL'};
local ADVANCED_OPT = RED_FONT_COLOR:WrapTextInColorCode(ADVANCED_OPTIONS);
local BINDINGS_OPT = KEY_BINDINGS_MAC or '按键绑定';

-- Helpers
local BLUE = GenerateClosure(ColorMixin.WrapTextInColorCode, BLUE_FONT_COLOR)
local unpack, _, db = unpack, ...; _ = CPAPI.Define; db.Data();
------------------------------------------------------------------------------------------------------------
-- Default cvar data (global)
------------------------------------------------------------------------------------------------------------
db:Register('Variables', CPAPI.Callable({
	showAdvancedSettings = {Bool(false);
		name = '全部设置';
		desc = '显示所有可用设置。';
		hide = true;
	};
	useCharacterSettings = {Bool(false);
		name = '角色专属设置';
		desc = '为当前角色使用专属的角色设置。';
		hide = true;
	};
	--------------------------------------------------------------------------------------------------------
	_'十字准星';
	--------------------------------------------------------------------------------------------------------
	crosshairEnable = _{Bool(true);
		name = '启用';
		desc = '启用十字准星，随时显示隐藏的中心光标位置。';
		note = '与 [@cursor] 宏命令一起使用，只需单击一下即可放置指向法术。';
	};
	crosshairSizeX = _{Number(24, 1, true);
		name = '宽';
		desc = '十字准星的宽度，以像素为单位。';
		deps = { crosshairEnable = true };
		advd = true;
	};
	crosshairSizeY = _{Number(24, 1, true);
		name = '高';
		desc = '十字准星的高度，以像素为单位。';
		deps = { crosshairEnable = true };
		advd = true;
	};
	crosshairCenter = _{Number(0.2, 0.05, true);
		name = '中心间隙';
		desc = '中心间隙占整个十字准星尺寸的百分比。';
		deps = { crosshairEnable = true };
		advd = true;
	};
	crosshairThickness = _{Number(2, 0.025, true);
		name = '粗细';
		desc = '以像素为单位的粗细。';
		note = '数值低于 2 时，可能会出现错误甚至根本啥都没有。';
		deps = { crosshairEnable = true };
		advd = true;
	};
	crosshairColor = _{Color('ff00fcff');
		name = '颜色';
		desc = '十字准星的颜色。';
		deps = { crosshairEnable = true };
	};
	--------------------------------------------------------------------------------------------------------
	_'移动';
	--------------------------------------------------------------------------------------------------------
	mvmtAnalog = _{Bool(true);
		name = '模拟移动';
		desc = '通过模拟技术进行移动，由你的摇杆角度转换而来。';
		note = '禁用此项，则使用离散技术的传统移动方式。';
	};
	mvmtStrafeAngleTravel = _{Range(tonumber(GetCVar('GamePadFaceMovementMaxAngle')) or 115, 5, 0, 180);
		name = '侧移角度阈值（移动）';
		desc = '控制你的角色何时从侧移转换为面向你的摇杆移动方向。以度为单位，从直接向前看开始计算。';
		note = '当设置为零时，始终面向你的摇杆移动方向。\n当设置为最大值时，永远不面向你的摇杆移动方向。';
	};
	mvmtStrafeAngleCombat = _{Range(tonumber(GetCVar('GamePadFaceMovementMaxAngleCombat')) or 115, 5, 0, 180);
		name = '侧移角度阈值（战斗）';
		desc = '控制你的角色在战斗中何时从侧移转换为面向你的摇杆移动方向。以度为单位，从直接向前看开始计算。';
		note = '当设置为零时，始终面向你的摇杆移动方向。\n当设置为最大值时，永远不面向你的摇杆移动方向。';
	};
	mvmtRunThreshold = _{Range(tonumber(GetCVar('GamePadRunThreshold')) or 0.5, 0.05, 0, 1);
		name = '奔跑 / 行走 阈值';
		desc = '控制角色何时开始奔跑。以摇杆移动总半径的分值表示。';
	};
	mvmtTurnWithCamera = _{Map(tonumber(GetCVar('GamePadTurnWithCamera')) or 2, {[0] = NEVER, [1] = '战斗中', [2] = ALWAYS});
		name = '角色随摄像机转动';
		desc = '当你转动摄像机时让你的角色面向相应的方向。';
	};
	mvmtStrafeAngleTravelMacro = _{String(nil);
		name = '侧移角度条件宏（移动）';
		desc = '用于覆盖侧移角度阈值（移动）的条件宏。';
		note = '使用的格式为：\n'
			.. BLUE'[condition] angle; nil'
			.. '\n……其中多个条件/角度使用分号分隔，使用"nil"清除和覆盖。';
		advd = true;
	};
	mvmtStrafeAngleCombatMacro = _{String(nil);
		name = '侧移角度条件宏（战斗）';
		desc = '用于覆盖侧移角度阈值（战斗）的条件宏。';
		note = '使用的格式为：\n'
			.. BLUE'[condition] angle; nil'
			.. '\n……其中多个条件/角度使用分号分隔，使用"nil"清除和覆盖。';
		advd = true;
	};
	--------------------------------------------------------------------------------------------------------
	_( MOUSE_LABEL ); -- Mouse
	--------------------------------------------------------------------------------------------------------
	mouseHandlingEnabled = _{Bool(true);
		name = '启用鼠标操作';
		desc = '启用自定义鼠标处理，在使用左右鼠标模拟按键时自动化光标切换和超时设置。';
		note = '如果禁用, 光标超时以及在自由移动和固定中心光标之间的切换也被禁用。';
		advd = true;
	};
	mouseHandlingReversed = _{Bool(false);
		name = '反转鼠标操作';
		desc = '左键鼠标模拟按键切换至固定中心模式，而不是自由移动模式。右键鼠标模拟按键切换至自由移动模式，而不是固定中心模式。',
		note = '结合使用 '..BLUE(INTERACT_ON_LEFT_CLICK_TEXT)..' 可以让左键点击的作用类似于右键点击，有效避免误操作引发战斗。',
		advd = true;
	};
	mouseFreeCursorReticle = _{Map(0, {[0] = OFF, [1] = VIDEO_OPTIONS_ENABLED, [2] = TARGET});
		name = '十字准星瞄准器';
		desc = '十字准星瞄准器使用自由移动光标，而不是固定中心光标。';
		note = '十字准星瞄准器可以选择放置在地面上的任何东西。';
	};
	mouseHideCursorOnMovement = _{Bool(false);
		name = '移动时隐藏光标';
		desc = '如果你没有遇到障碍，光标会在开始移动时隐藏。';
		note = '需要在设置中，将“摇杆输入时禁用光标”设置为“无”。';
	};
	mouseAlwaysCentered = _{Bool(false);
		name = '始终显示鼠标光标';
		desc = '在控制摄像机时总是保持光标居中并可见。';
	};
	mouseShowCenterTooltip = _{Bool(true);
		name = '显示居中光标提示';
		desc = '光标居中时，为鼠标指向的目标显示提示。';
	};
	mouseAutoControlPickup = _{Bool(true);
		name = '自动控制光标进行拾取';
		desc = '在拾取物品时自动控制光标。';
		advc = true;
	};
	mouseAutoClearCenter = _{Number(2.0, 0.25, true);
		name = '自动光标超时';
		desc = '自动隐藏居中光标的时间（秒）。';
		advd = true;
	};
	mouseFreeCursorEnableTime = _{Number(0.15, 0.05, true);
		name = '自由光标计时';
		desc = '启用自由光标的时间（秒）。';
		note = '按下和松开按键的时间要足够长。';
		advd = true;
	};
	doubleTapTimeout = _{Number(0.25, 0.05, true);
		name = '双击切换时限';
		desc = '当你双击选择的控制键时，切换鼠标光标的响应时间限制。';
		advd = true;
	};
	doubleTapModifier = _{Select('<none>', '<none>', unpack(MODID_SELECT));
		name = '双击控制键';
		desc = '设置双击哪个控制键，来切换鼠标光标的响应时间限制。';
	};
	--------------------------------------------------------------------------------------------------------
	_'环形菜单';
	--------------------------------------------------------------------------------------------------------
	radialStickySelect = _{Bool(false);
		name = '粘滞选择';
		desc = '在选择环形菜单上的一项后，该项将保持被选中状态，直到选择另一项为止。';
	};
	radialClearFocusTime = _{Number(0.5, 0.025);
		name = '焦点超时';
		desc = '在获取摇杆输入后清除焦点的时间，单位为秒。';
	};
	radialActionDeadzone = _{Range(0.5, 0.05, 0, 1);
		name = '死区';
		desc = '快捷点选环形菜单的死区。';
	};
	radialCosineDelta = _{Delta(1);
		name = '轴解释器';
		desc = '摇杆位置与扇形选择之间的映射关系。';
		note = '+ 正常\n- 反向';
		advd = true;
	};
	radialPrimaryStick = _{Select('Movement', unpack(STICK_SELECT));
		name = '主摇杆';
		desc = '用于操作环形菜单的摇杆。';
		note = '确保你的选择不会与你的按键绑定冲突。';
	};
	radialRemoveButton = _{Button('PADRSHOULDER');
		name = '移除按键';
		desc = '用于编辑法环时删除选定项目的按键。';
	};
	radialScale = _{Number(1, 0.025, true);
		name = '法环缩放比例';
		desc = '所有环形菜单的缩放比例，相对于用户界面的缩放比例。';
		advd = true;
	};
	radialPreferredSize = _{Number(500, 25, true);
		name = '法环尺寸';
		desc = '所有环形菜单的尺寸，单位为像素。';
		advd = true;
	};
	radialNormalColor = _{Color(CPAPI.GetMutedClassColor(0.6, true));
		name = '常规颜色';
		desc = '扇形选区的常规背景颜色。';
		advd = true;
	};
	radialActiveColor = _{Color(GREEN_FONT_COLOR);
		name = '激活颜色';
		desc = '激活状态的颜色。';
		advd = true;
	};
	radialHiliteColor = _{Color(NORMAL_FONT_COLOR);
		name = '高亮颜色';
		desc = '已选中时的颜色。';
		advd = true;
	};
	radialStickyColor = _{Color(ORANGE_FONT_COLOR);
		name = '粘滞颜色';
		desc = '粘滞选中时的颜色。';
		advd = true;
	};
	radialAccentColor = _{Color(CPAPI.GetClassColorObject());
		name = '强调颜色';
		desc = '环形菜单的强调颜色。';
		advd = true;
	};
	--------------------------------------------------------------------------------------------------------
	_'环形键盘';
	--------------------------------------------------------------------------------------------------------
	keyboardEnable = _{Bool(false);
		name = '启用';
		desc = '启用一个可以在屏幕上使用的环形键盘，可以用来输入消息。';
	};
	--------------------------------------------------------------------------------------------------------
	_'团队光标';
	--------------------------------------------------------------------------------------------------------
	raidCursorScale = _{Number(1, 0.1);
		name = '比例';
		desc = '光标的比例。';
	};
	raidCursorMode = _{Map(1, {'Redirect', FOCUS, TARGET}),
		name = '目标锁定模式';
		desc = '更改团队光标获取目标的方式。重定向和焦点模式将在不更改你当前目标的情况下施放对应的技能。';
		note = '重定向无法响应目标宏或模糊目标的技能。使用带有 [@focus] 宏的目标选择方式或焦点模式来控制行为。';
	};
	raidCursorModifier = _{Select('<none>', '<none>', unpack(MODID_EXTEND));
		name = '控制键';
		desc = '使用哪个控制键和移动按键来移动光标。';
		note = '在使用光标时，按键组合下的控制键将不可用。\n\n控制键也可以每个按键单独配置。';
	};
	raidCursorUp = _{Button('PADDUP', true);
		name = '向上移动';
		desc = '向上移动光标的按键。';
		deps = { raidCursorModifier = '<none>' };
		advd = true;
	};
	raidCursorDown = _{Button('PADDDOWN', true);
		name = '向下移动';
		desc = '向下移动光标的按键。';
		deps = { raidCursorModifier = '<none>' };
		advd = true;
	};
	raidCursorLeft = _{Button('PADDLEFT', true);
		name = '向左移动';
		desc = '向左移动光标的按键。';
		deps = { raidCursorModifier = '<none>' };
		advd = true;
	};
	raidCursorRight = _{Button('PADDRIGHT', true);
		name = '向右移动';
		desc = '向右移动光标的按键。';
		deps = { raidCursorModifier = '<none>' };
		advd = true;
	};
	raidCursorFilter = _{String(nil);
		name = '过滤条件';
		desc = '使用布尔表达式，用于查找团队光标框架的筛选条件。';
		note = BLUE'node' .. ' 是当前正在检查的框架。\n'
			.. BLUE'unit' .. ' 是该框架的当前单位ID。';
		advd = true;
	};
	raidCursorWrapDisable = _{Bool(false);
		name = '禁用回环';
		desc = '防止在移动光标时，从光标从末尾返回最前端。';
		advd = true;
	};
	raidCursorPortraitShow = _{Bool(true);
		name = '显示头像';
		desc = '显示当前单位的头像，以及生命值百分比和可用的法术。';
		advd = true;
	};
	raidCursorPointerAnimation = _{Bool(true);
		name = '启用动画';
		desc = '指针箭头会随着移动方向旋转，并且在移动时头像会放大和缩小。';
		advd = true;
	};
	raidCursorPointerSize = _{Number(22, 2, true);
		name = '指针尺寸';
		desc = '指针箭头的大小，单位为像素。';
		advd = true;
	};
	raidCursorPointerOffset = _{Number(-2, 1);
		name = '指针偏移';
		desc = '指针箭头与所选节点中心的偏移量，单位为像素。';
		advd = true;
	};
	raidCursorTravelTime = _{Range(4, 1, 1, 10);
		name = '移动时间';
		desc = '光标从一个节点移动到另一个节点所需的时间。';
		note = '数值越高速度越慢。';
		advd = true;
	};
	--------------------------------------------------------------------------------------------------------
	_'界面光标';
	--------------------------------------------------------------------------------------------------------
	UIenableCursor = _{Bool(true);
		name = ENABLE;
		desc = '启用界面光标。禁用则使用基于光标的界面交互。';
	};
	UIWrapDisable = _{Bool(false);
		name = '禁用回环';
		desc = '防止在移动光标时，从光标从末尾返回最前端。';
		advd = true;
	};
	--------------------------------------------------------------------------------------------------------
	_'单位热键';
	--------------------------------------------------------------------------------------------------------
	unitHotkeyFocusMode = _{Bool(false);
		name = '使用焦点模式';
		desc = '热键可控制焦点目标，而不是当前目标。';
	};
	unitHotkeyDefaultMode = _{Bool(false);
		name = '默认为'..BLUE(GetBindingName('TARGETNEARESTENEMY'));
		desc = '没有目标被选中时，热键为'..BLUE(GetBindingName('TARGETNEARESTENEMY'))..' 。';
	};
	unitHotkeyNamePlates = _{Bool(true);
		name = '在姓名板上显示';
		desc = '热键提示出现在可用的姓名板上。';
	};
	unitHotkeyGhostMode = _{Bool(false);
		name = '始终显示';
		desc = '锁定目标后，热键提示会停留在单位框架上。';
	};
	unitHotkeyGhostAlpha = _{Number(0.5, 0.05, true);
		name = '非活动不透明度';
		desc = '在选择目标后，非活动的热键提示在单位框架上的不透明度。';
	};
	unitHotkeySize = _{Number(CPAPI.IsClassicEraVersion and 32 or 24, 1);
		name = '尺寸';
		desc = '单位热键的大小，单位为像素。';
	};
	unitHotkeyOffsetX = _{Number(0, 1, true);
		name = '水平偏移';
		desc = '热键提示位置的水平偏移，单位为像素。';
		advd = true;
	};
	unitHotkeyOffsetY = _{Number(0, 1, true);
		name = '垂直偏移';
		desc = '热键提示位置的垂直偏移，单位为像素。';
		advd = true;
	};
	unitHotkeyTokens = _{String('raid1-9; raid10-40; party1-4; player; boss1-4; arena1-5; party1-4pet; raid1-40target');
		name = '单位泳道';
		desc = '匹配单位泳道的条件，每种类型用分号分隔。';
		note = '例如 '..BLUE('小队1-4')..'; '..BLUE('player')..' 将会对应小队玩家1、小队玩家2、小队玩家3、小队玩家4和玩家。';
		advd = true;
	};
	unitHotkeySet = _{Select('Dynamic', 'Dynamic', 'Left', 'Right', 'Custom');
		name = '按键设置';
		desc = '用于单位热键的按键设置。';
		note = '动态选项将使用不与你的 '..BLUE'L[目标单位框架（长按）]'..' 冲突的按键。';
	};
	unitHotkeyButton1 = _{Button('PAD1');
		name = '组合按键 1';
		desc = '用于组合热键 1 的按键。';
		note = '通过 '..BLUE'L[按键设置]'..' > '..BLUE'L[自定义]'..' 来分别设置每个按键。';
		deps = { unitHotkeySet = 'Custom' };
	};
	unitHotkeyButton2 = _{Button('PAD2');
		name = '组合按键 2';
		desc = '用于组合热键 2 的按键。';
		note = '通过 '..BLUE'L[按键设置]'..' > '..BLUE'L[自定义]'..' 来分别设置每个按键。';
		deps = { unitHotkeySet = 'Custom' };
	};
	unitHotkeyButton3 = _{Button('PAD3');
		name = '组合按键 3';
		desc = '用于组合热键 3 的按键。';
		note = '通过 '..BLUE'L[按键设置]'..' > '..BLUE'L[自定义]'..' 来分别设置每个按键。';
		deps = { unitHotkeySet = 'Custom' };
	};
	unitHotkeyButton4 = _{Button('PAD4');
		name = '组合按键 4';
		desc = '用于组合热键 4 的按键。';
		note = '通过 '..BLUE'L[按键设置]'..' > '..BLUE'L[自定义]'..' 来分别设置每个按键。';
		deps = { unitHotkeySet = 'Custom' };
	};
	--------------------------------------------------------------------------------------------------------
	_( ACCESSIBILITY_LABEL ); -- Accessibility
	--------------------------------------------------------------------------------------------------------
	autoExtra = _{Bool(true);
		name = '自动绑定额外项目';
		desc = '自动将追踪到的任务物品和额外技能添加到多功能法环中。';
	};
	autoSellJunk = _{Bool(true);
		name = '自动出售垃圾';
		desc = '与商店NPC互动时自动出售垃圾道具。';
	};
	UIscale = _{Number(1, 0.025, true);
		name = '全局缩放';
		desc = '大多数 ConsolePort 框架的比例，相对于 UI 比例。';
		note = '动作条尺寸单独缩放。';
		advd = true;
	};
	--------------------------------------------------------------------------------------------------------
	_'电量';
	--------------------------------------------------------------------------------------------------------
	powerLevelShow = _{Bool(false);
		name = '显示仪表';
		desc = '显示当前活动游戏手柄的电量。';
		note = '本设置无法与通过蓝牙连接的 Xbox 手柄一起使用。需要使用 Xbox 适配器。';
	};
	powerLevelShowIcon = _{Bool(true);
		name = '显示类型图标';
		desc = '显示当前活动游戏手柄电量旁边的图标。';
		note = '类型有 PlayStation、Xbox 或通用。';
	};
	powerLevelShowText = _{Bool(true);
		name = '显示状态信息';
		desc = '显示当前活动游戏手柄电量旁边的状态信息。';
		note = '危急、低、中、高、有线/充电或未知/断线。';
	};
	--------------------------------------------------------------------------------------------------------
	_( BINDINGS_OPT ); -- Bindings
	--------------------------------------------------------------------------------------------------------
	bindingOverlapEnable = _{Bool(false);
		name = '允许多重绑定';
		desc = '允许将多个组合键绑定到同一个按键上。';
		advd = true;
	};
	bindingAllowSticks = _{Bool(false);
		name = '允许矢量绑定';
		desc = '允许绑定独立的摇杆输入。';
		advd = true;
	};
	bindingShowExtraBars = _{Bool(false);
		name = '显示所有动作条';
		desc = '显示所有动作条，而不仅仅是当前选中的动作条。';
		advd = true;
	};
	bindingShowSpellMenuGrid = _{Bool(false);
		name = '习得技能时显示动作条网格';
		desc = '习得新技能时，在动作条网格上显示一个光标。';
	};
	disableHotkeyRendering = _{Bool(false);
		name = '禁用热键自定义';
		desc = '禁用在普通动作条上的热键自定义功能。';
		advd = true;
	};
	useAtlasIcons = _{Bool(not CPAPI.IsClassicEraVersion);
		name = '使用默认热键图标';
		desc = '使用默认热键图标，而不是 ConsolePort 提供的自定义图标。';
		note = '需要重新加载';
		hide = CPAPI.IsClassicEraVersion;
	};
	emulatePADPADDLE1 = _{Pseudokey('none');
		name = '模拟 '..(KEY_PADPADDLE1 or '拨片 1');
		desc = '使用拨片 1 按键模拟键盘按键。';
	};
	emulatePADPADDLE2 = _{Pseudokey('none');
		name = '模拟 '..(KEY_PADPADDLE2 or '拨片 2');
		desc = '使用拨片 2 按键模拟键盘按键。';
	};
	emulatePADPADDLE3 = _{Pseudokey('none');
		name = '模拟 '..(KEY_PADPADDLE3 or '拨片 3');
		desc = '使用拨片 3 按键模拟键盘按键。';
	};
	emulatePADPADDLE4 = _{Pseudokey('none');
		name = '模拟 '..(KEY_PADPADDLE4 or '拨片 4');
		desc = '使用拨片 4 按键模拟键盘按键。';
	};
	interactButton = _{Button('PAD1', true):Set('none', true);
		name = '单击覆盖按键';
		desc = '在特定条件适用时用于单击的按键或组合键，但在其他情况下则作为普通绑定按键操作。';
		note = '使用肩键与准星结合，以实现平滑且精确的交互。点击操作在准星或光标位置执行。';
	};
	interactCondition = _{String('[vehicleui] nil; [@target,noharm][@target,noexists][@target,harm,dead] TURNORACTION; nil');
		name = '单击覆盖条件';
		desc = '启用点击覆盖按键的宏条件。默认条件是在没有敌人目标时点击鼠标右键。';
		note = '使用的格式为：\n'
			.. BLUE'[condition] bindingID; nil'
			.. '\n……其中多个条件/角度使用分号分隔，使用"nil"清除和覆盖。';
		advd = true;
	};
	--------------------------------------------------------------------------------------------------------
	_( ADVANCED_OPT ); -- Advanced
	--------------------------------------------------------------------------------------------------------
	actionPageCondition = _{String(nil);
		name = '操作页面的条件';
		desc = '检查动作条页面的宏条件。';
		hide = true;
	};
	actionPageResponse = _{String(nil);
		name = '操作页面的响应';
		desc = '对自定义处理的条件响应。';
		hide = true;
	};
	classFileOverride = _{String(nil);
		name = '覆盖类文件';
		desc = '覆盖类主题以用于界面风格。';
		hide = true;
	};
},  --------------------------------------------------------------------------------------------------------
function(self, key) return (rawget(self, key) or {})[1] end))